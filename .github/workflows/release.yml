name: Release and Publish

on:
  push:
    branches: [main]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  workflow_dispatch:
    inputs:
      force-release:
        description: 'Force release even without version change'
        required: false
        default: 'false'
        type: boolean

env:
  CARGO_TERM_COLOR: always

jobs:
  # Check if this is a version bump commit
  check-version:
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.check.outputs.should-release }}
      version: ${{ steps.check.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Check for version change
        id: check
        run: |
          # Extract current version
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Check if this is a manual dispatch with force-release
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.force-release }}" = "true" ]; then
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "Force release requested: $VERSION"
          # Check if version changed in Cargo.toml or package.json
          elif git diff HEAD~1 HEAD --name-only | grep -E "(Cargo.toml|package.json)"; then
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "Version bump detected: $VERSION"
          else
            echo "should-release=false" >> $GITHUB_OUTPUT
            echo "No version change detected"
          fi

  # Run tests before building
  test:
    runs-on: ubuntu-latest
    needs: check-version
    if: needs.check-version.outputs.should-release == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Run tests
        run: cargo test --verbose
        
      - name: Run clippy
        run: cargo clippy -- -D warnings
        
      - name: Check formatting
        run: cargo fmt --check

  # Build binaries for multiple platforms
  build:
    needs: [check-version, test]
    if: needs.check-version.outputs.should-release == 'true'
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            artifact-name: claudectl-linux-x64
          - target: aarch64-unknown-linux-gnu  
            os: ubuntu-latest
            artifact-name: claudectl-linux-arm64
          - target: x86_64-apple-darwin
            os: macos-latest
            artifact-name: claudectl-macos-x64
          - target: aarch64-apple-darwin
            os: macos-latest
            artifact-name: claudectl-macos-arm64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            artifact-name: claudectl-windows-x64.exe
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Install cross compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          
      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
          
      - name: Create artifact directory
        run: mkdir -p artifacts
        
      - name: Copy binary (Unix)
        if: runner.os != 'Windows'
        run: cp target/${{ matrix.target }}/release/claudectl artifacts/${{ matrix.artifact-name }}
        
      - name: Copy binary (Windows)
        if: runner.os == 'Windows'
        run: cp target/${{ matrix.target }}/release/claudectl.exe artifacts/${{ matrix.artifact-name }}
        
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: artifacts/${{ matrix.artifact-name }}

  # Generate shell completions  
  completions:
    needs: [check-version, test]
    if: needs.check-version.outputs.should-release == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Build claudectl
        run: cargo build --release
        
      - name: Generate completions (already done by build.rs)
        run: |
          # Completions are generated automatically by build.rs during cargo build
          ls -la completions/
          echo "Completion files generated:"
          find completions/ -name "*" -type f
          
      - name: Upload completions
        uses: actions/upload-artifact@v4
        with:
          name: completions
          path: completions/

  # Create GitHub release
  release:
    needs: [check-version, build, completions]
    if: needs.check-version.outputs.should-release == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.check-version.outputs.version }}
          name: Release v${{ needs.check-version.outputs.version }}
          generate_release_notes: true
          files: |
            artifacts/claudectl-linux-x64/claudectl-linux-x64
            artifacts/claudectl-linux-arm64/claudectl-linux-arm64
            artifacts/claudectl-macos-x64/claudectl-macos-x64
            artifacts/claudectl-macos-arm64/claudectl-macos-arm64
            artifacts/claudectl-windows-x64.exe/claudectl-windows-x64.exe
            artifacts/completions/*

  # Prepare and publish npm package
  npm-publish:
    needs: [check-version, build, completions]
    if: needs.check-version.outputs.should-release == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Prepare npm package
        run: |
          # Copy Linux x64 binary as the default
          mkdir -p target/release
          cp artifacts/claudectl-linux-x64/claudectl-linux-x64 target/release/claudectl
          chmod +x target/release/claudectl
          
          # Ensure npm directory exists and copy platform binaries
          # The npm directory should already exist with install.js, uninstall.js, run.js
          mkdir -p npm/bin
          cp artifacts/claudectl-linux-x64/claudectl-linux-x64 npm/bin/claudectl-linux-x64
          cp artifacts/claudectl-linux-arm64/claudectl-linux-arm64 npm/bin/claudectl-linux-arm64
          cp artifacts/claudectl-macos-x64/claudectl-macos-x64 npm/bin/claudectl-macos-x64
          cp artifacts/claudectl-macos-arm64/claudectl-macos-arm64 npm/bin/claudectl-macos-arm64
          cp artifacts/claudectl-windows-x64.exe/claudectl-windows-x64.exe npm/bin/claudectl-windows-x64.exe
          
          # Make all binaries executable
          chmod +x npm/bin/*
          
          # Copy updated completions
          mkdir -p completions
          cp -r artifacts/completions/* completions/
          
      - name: Verify package contents
        run: |
          echo "Package contents:"
          ls -la target/release/
          ls -la npm/
          ls -la npm/bin/
          ls -la completions/
          
          echo "Package version: $(node -p 'require("./package.json").version')"
          
          # Verify critical npm files exist
          echo "Verifying npm scripts:"
          if [ -f npm/install.js ]; then
            echo "✓ npm/install.js exists"
          else
            echo "✗ npm/install.js missing"
            exit 1
          fi
          
          if [ -f npm/run.js ]; then
            echo "✓ npm/run.js exists"  
          else
            echo "✗ npm/run.js missing"
            exit 1
          fi
          
      - name: Publish to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}