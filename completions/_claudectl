#compdef claudectl

autoload -U is-at-least

_claudectl() {
    typeset -A opt_args
    typeset -a _arguments_options
    local ret=1

    if is-at-least 5.2; then
        _arguments_options=(-s -S -C)
    else
        _arguments_options=(-s -C)
    fi

    local context curcontext="$curcontext" state line
    _arguments "${_arguments_options[@]}" : \
'--debug[Enable debug logging output]' \
'-h[Print help]' \
'--help[Print help]' \
":: :_claudectl_commands" \
"*::: :->claudectl" \
&& ret=0
    case $state in
    (claudectl)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:claudectl-command-$line[1]:"
        case $line[1] in
            (init)
_arguments "${_arguments_options[@]}" : \
'--debug[Enable debug logging output]' \
'-h[Print help]' \
'--help[Print help]' \
'::project_name:_default' \
&& ret=0
;;
(task)
_arguments "${_arguments_options[@]}" : \
'--debug[Enable debug logging output]' \
'-h[Print help]' \
'--help[Print help]' \
':task_name:_default' \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" : \
'--debug[Enable debug logging output]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(rm)
_arguments "${_arguments_options[@]}" : \
'--debug[Enable debug logging output]' \
'-h[Print help]' \
'--help[Print help]' \
':task_name:' \
&& ret=0
;;
(completions)
_arguments "${_arguments_options[@]}" : \
'--verify[]' \
'--debug[Enable debug logging output]' \
'-h[Print help]' \
'--help[Print help]' \
'::shell:(bash zsh fish power-shell elvish)' \
&& ret=0
;;
(repair)
_arguments "${_arguments_options[@]}" : \
'--force[]' \
'--debug[Enable debug logging output]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_claudectl__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:claudectl-help-command-$line[1]:"
        case $line[1] in
            (init)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(task)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(rm)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(completions)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(repair)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
}

(( $+functions[_claudectl_commands] )) ||
_claudectl_commands() {
    local commands; commands=(
'init:' \
'task:' \
'list:' \
'rm:' \
'completions:' \
'repair:' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'claudectl commands' commands "$@"
}
(( $+functions[_claudectl__completions_commands] )) ||
_claudectl__completions_commands() {
    local commands; commands=()
    _describe -t commands 'claudectl completions commands' commands "$@"
}
(( $+functions[_claudectl__help_commands] )) ||
_claudectl__help_commands() {
    local commands; commands=(
'init:' \
'task:' \
'list:' \
'rm:' \
'completions:' \
'repair:' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'claudectl help commands' commands "$@"
}
(( $+functions[_claudectl__help__completions_commands] )) ||
_claudectl__help__completions_commands() {
    local commands; commands=()
    _describe -t commands 'claudectl help completions commands' commands "$@"
}
(( $+functions[_claudectl__help__help_commands] )) ||
_claudectl__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'claudectl help help commands' commands "$@"
}
(( $+functions[_claudectl__help__init_commands] )) ||
_claudectl__help__init_commands() {
    local commands; commands=()
    _describe -t commands 'claudectl help init commands' commands "$@"
}
(( $+functions[_claudectl__help__list_commands] )) ||
_claudectl__help__list_commands() {
    local commands; commands=()
    _describe -t commands 'claudectl help list commands' commands "$@"
}
(( $+functions[_claudectl__help__repair_commands] )) ||
_claudectl__help__repair_commands() {
    local commands; commands=()
    _describe -t commands 'claudectl help repair commands' commands "$@"
}
(( $+functions[_claudectl__help__rm_commands] )) ||
_claudectl__help__rm_commands() {
    local commands; commands=()
    _describe -t commands 'claudectl help rm commands' commands "$@"
}
(( $+functions[_claudectl__help__task_commands] )) ||
_claudectl__help__task_commands() {
    local commands; commands=()
    _describe -t commands 'claudectl help task commands' commands "$@"
}
(( $+functions[_claudectl__init_commands] )) ||
_claudectl__init_commands() {
    local commands; commands=()
    _describe -t commands 'claudectl init commands' commands "$@"
}
(( $+functions[_claudectl__list_commands] )) ||
_claudectl__list_commands() {
    local commands; commands=()
    _describe -t commands 'claudectl list commands' commands "$@"
}
(( $+functions[_claudectl__repair_commands] )) ||
_claudectl__repair_commands() {
    local commands; commands=()
    _describe -t commands 'claudectl repair commands' commands "$@"
}
(( $+functions[_claudectl__rm_commands] )) ||
_claudectl__rm_commands() {
    local commands; commands=()
    _describe -t commands 'claudectl rm commands' commands "$@"
}
(( $+functions[_claudectl__task_commands] )) ||
_claudectl__task_commands() {
    local commands; commands=()
    _describe -t commands 'claudectl task commands' commands "$@"
}

if [ "$funcstack[1]" = "_claudectl" ]; then
    _claudectl "$@"
else
    compdef _claudectl claudectl
fi
