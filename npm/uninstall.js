#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const os = require('os');

function detectShell() {
  const shell = process.env.SHELL || '';
  
  if (shell.includes('zsh')) return 'zsh';
  if (shell.includes('bash')) return 'bash';
  if (shell.includes('fish')) return 'fish';
  
  return 'bash';
}

function getCompletionPaths(shell) {
  const homeDir = os.homedir();
  
  switch (shell) {
    case 'zsh':
      return [
        path.join(homeDir, '.zsh', 'completions', '_claudectl'),
        path.join(homeDir, '.zsh_completion.d', '_claudectl'),
        '/usr/local/share/zsh/site-functions/_claudectl'
      ];
    case 'bash':
      return [
        path.join(homeDir, '.bash_completion.d', 'claudectl'),
        '/etc/bash_completion.d/claudectl'
      ];
    case 'fish':
      return [
        path.join(homeDir, '.config', 'fish', 'completions', 'claudectl.fish')
      ];
    default:
      return [];
  }
}

function printProgress(message, success = true) {
  const icon = success ? '‚úì' : '‚úó';
  console.log(`${icon} ${message}`);
}

function verifyRemoval(filePaths) {
  let allRemoved = true;
  let remainingFiles = [];
  
  for (const filePath of filePaths) {
    if (fs.existsSync(filePath)) {
      allRemoved = false;
      remainingFiles.push(filePath);
    }
  }
  
  return { allRemoved, remainingFiles };
}

function removeCompletions() {
  try {
    console.log('üóëÔ∏è  Removing shell completions for claudectl...');
    
    const shell = detectShell();
    printProgress(`Detected shell: ${shell}`);
    
    const completionPaths = getCompletionPaths(shell);
    let removedFiles = [];
    let failedRemovals = [];
    
    // Attempt to remove all completion files
    for (const filePath of completionPaths) {
      try {
        if (fs.existsSync(filePath)) {
          // Check if it's a claudectl completion by looking for our marker
          const content = fs.readFileSync(filePath, 'utf8');
          if (content.includes('claudectl') || content.includes('# Generated by')) {
            fs.unlinkSync(filePath);
            removedFiles.push(filePath);
            printProgress(`Removed: ${filePath}`);
          } else {
            printProgress(`Skipped: ${filePath} (not a claudectl completion)`);
          }
        }
      } catch (error) {
        failedRemovals.push({ path: filePath, error: error.message });
        printProgress(`Failed to remove: ${filePath} - ${error.message}`, false);
      }
    }
    
    // Report results
    if (removedFiles.length > 0) {
      printProgress(`Removed ${removedFiles.length} completion file(s)`);
    } else {
      printProgress('No claudectl completion files found to remove');
    }
    
    // Verify removal was successful
    const verification = verifyRemoval(removedFiles);
    if (!verification.allRemoved) {
      printProgress(`Warning: ${verification.remainingFiles.length} files still exist`, false);
      verification.remainingFiles.forEach(file => {
        console.log(`  Remaining: ${file}`);
      });
    }
    
    // Report any failed removals
    if (failedRemovals.length > 0) {
      printProgress(`${failedRemovals.length} files could not be removed`, false);
      console.log('üí° You may need to remove these manually with sudo:');
      failedRemovals.forEach(({ path }) => {
        console.log(`  sudo rm "${path}"`);
      });
    }
    
    // Success message
    if (removedFiles.length > 0 && verification.allRemoved && failedRemovals.length === 0) {
      printProgress('‚ú® Cleanup completed successfully!');
    }
    
    // Note about shell config files
    console.log('\nüìù Note: Shell configuration files (.zshrc, .bashrc) were not modified.');
    console.log('   Any completion setup lines are harmless and can be left in place.');
    
  } catch (error) {
    printProgress(`Failed to remove completions: ${error.message}`, false);
    console.log('üí° If you need to clean up manually:');
    console.log('   - Check ~/.zsh_completion.d/_claudectl');
    console.log('   - Check ~/.bash_completion.d/claudectl');
    console.log('   - Check ~/.config/fish/completions/claudectl.fish');
    // Don't fail the uninstallation if completion removal fails
  }
}

// Only run if this script is executed directly
if (require.main === module) {
  removeCompletions();
}

module.exports = { removeCompletions };